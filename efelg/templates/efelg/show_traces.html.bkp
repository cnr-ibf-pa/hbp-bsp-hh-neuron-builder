
{% load static %}

<!DOCTYPE html>
<html>
    <head>
        <title>Feature extraction GUI</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width">

        {# Bower Dependencies #}
        <link rel="stylesheet" href="{% static 'hbp-collaboratory-theme/dist/css/bootstrap.css' %}">
        <link rel="stylesheet" href="{% static 'css/cdp2.css' %}">
        <script type="text/javascript" src="{% static 'jquery/dist/jquery.min.js' %}"></script>
        <script type="text/javascript" src="{% static 'plotly-latest.min.js' %}"></script>

        <style>
            html, body {
                margin: 0;
                padding: 0;
                height: 100%;
                width: 100%;
            }

            #chart1 {
                _width: 100%;
                _height: 80%;
            }

            .chart {
                width: 400px;
                height: 400px;
                display: inline-block;
            }

            .ctrl_box {
                font-family: sans-serif;
                color: #808080;
                width: 100%;
                text-align: center;
                padding: 15pt 0;
            }
        </style>
    </head>



    <body>
        <div class="panel panel-info" width=100% id="input-groups">
            <div class="panel-heading"><h3>Upload and/or select the trace file(s) for feature extraction</h3></div>
        </div>
        <br>
        
        <!--
        <form id="select_files_form" action="/select_traces/" method="post">
            -->
       <!--
            <form id="upload_files" name="upload_files_name" method="POST" enctype="multipart/form-data" action="/upload_files">
                <div class="panel panel-success" id="input-groups">
                    <div class="panel-heading">Upload your own file(s) and then select them from the list below</div>
                    <br>
                    <input type="file" name="user_files" multiple/>
                    <br>
                    <input type="submit" id="upload_button" name="upload_button_name" value="Upload" />
                    <br>
                </div>
            </form>
            -->

            <div class='ctrl_box'>
                <label>Cell properties:</label>
                <br>
                Species
                <select id="drop_species" >
                    <option value="">--</option>
                </select>
                -> Area 
                <select id="drop_area" >
                    <option value="">--</option>
                </select>
                -> Region
                <select id="drop_region" >
                    <option value="">--</option>
                </select>
                -> Type 
                <select id="drop_type" >
                    <option value="">--</option>
                </select>
                -> eType 
                <select id="drop_etype" >
                    <option value="">--</option>
                </select>
            </div>
            <div id='charts'></div>

            <script>    
                $.getJSON('/get_list', function(data) {
                    cells_tree = {}
                    $.each(data, function(index, elem) {
                        params = elem.split('_')
                        branch = cells_tree
                        for (var i=0; i<6; i++) {
                            if (!(params[i] in branch) && i == 5)
                            branch[params[i]] = []
                            else if (!(params[i] in branch) && i != 5)
                            branch[params[i]] = {}

                            if (i == 5)
                            branch[params[i]].push(elem)

                            branch = branch[params[i]]
                        }
                    })

                    function enable_dropdown(el, tree) {
                        $(el).prop("disabled", false)
                        $(el).empty()
                        $(el).append('<option>--</option>')
                        $.each(Object.keys(tree), function(index, elem) {
                            $(el).append('<option value="' + elem + '">' + elem + '</option>')
                        })

                        if ($(el).next('select').length == 0) {
                            $(el).on('change', function(ev) {
                                $.each(tree[ev.target.value], function(index, elem) {
                                    $('#charts').append('<div class="cell" id="' + index + '"></div>')

                                    $.each(elem, function(i, e) {
                                        $('#' + index).append('<div id="' + e + '"></div>')
                                        plotTraces(e, e)
                                    })
                                })
                            })                
                            } else {

                            $(el).on('change', function(ev) {
                                enable_dropdown($(el).next('select').eq(0), tree[ev.target.value])
                            })
                        }
                    }


                    /*
                    if (Array.isArray(tree)) {
                        $.each(tree, function(index, elem) {
                            $(el).append('<option value="' + elem + '">' + elem + '</option>')
                        })

                        $(el).on('change', function(ev) {
                            plotTraces('chart1', ev.target.value)
                        })                
                        } else {
                        $.each(Object.keys(tree), function(index, elem) {
                            $(el).append('<option value="' + elem + '">' + elem + '</option>')
                        })

                        $(el).on('change', function(ev) {
                            enable_dropdown($(el).next('select').eq(0), tree[ev.target.value])
                        })
                    }
                }




                $('.ctrl_box > select').prop("disabled", true)

                */

                $('.ctrl_box > select').prop("disabled", true)

                enable_dropdown('#drop_species', cells_tree)
            })

            function plotTraces(container_id, cellname) {
                var SHOW_FADED = 0.15
                var SHOW_CHECK = 0.65
                var SHOW_HOVER = 1.0

                $('#' + container_id).empty()

                $.getJSON('/get_data/' + cellname, function(data) {
                    data = JSON.parse(data)
                    info_container = 'info_' + data['md5'] 
                    form_container = 'form_' + data['md5']
                    plot_container = 'plot_' + data['md5']

                    $('#' + container_id).append('<div id="' + info_container + '"></div')
                    $('#' + info_container).append('<span>info varie</span>')

                    $('#' + container_id).append('<form id="' + form_container + '"></form')
                    $('#' + form_container).hide()

                    $('#' + container_id).append('<div id="' + plot_container + '"></div')

                                plotdata = []
                                $.each(data['traces'], function(key, trace) {
                                    $('#' + form_container).append('<input type="checkbox">')

                                    var newTrace = {
                                        y: trace,
                                        name: key + ' ' + data['amp_unit'],
                                        mode: 'lines',
                                        hoverinfo: 'none',
                                        opacity: SHOW_FADED
                                    }
                                    plotdata.push(newTrace)
                                });

                                plotdata.sort(function(a, b) {
                                    a = parseFloat(a.name)
                                    b = parseFloat(b.name)

                                    if (a == b)
                                    return 0
                                    else 
                                    return a < b
                                })

                                var layout = {
                                    legend: {
                                        orientation: "h",
                                        x: 0,
                                        y: 1.2,
                                    }
                                }

                                var n_traces = plotdata.length
                                var opacities = new Array(n_traces).fill(SHOW_FADED)
                                var opacity_before_hover = null

                                function requestUpdate() {                 
                                    var update = {
                                        opacity: opacities
                                    }

                                    Plotly.restyle(plot_container, update).then(manageLegend)

                                    legend = Plotly.d3.select('#' + plot_container + ' g.legend')
                                    legend.selectAll('.traces').each(function(d, i) {
                                        Plotly.d3.select(this).style('opacity', opacities[i] + 0.4)
                                    })
                                }

                                Plotly.newPlot(plot_container, plotdata, layout, {displayModeBar: false}).then(manageLegend)
                                requestUpdate()

                                function manageLegend() {
                                    legend = Plotly.d3.select('#' + plot_container + ' g.legend')
                                    elems = legend.selectAll('.traces rect')

                                    function savePrevious(d) {
                                        var i = d[0].trace.index

                                        opacity_before_hover = opacities[i]

                                        opacities[i] = SHOW_HOVER

                                        requestUpdate()
                                    }

                                    function restorePrevious(d) {
                                        var i = d[0].trace.index

                                        opacities[i] = opacity_before_hover

                                        requestUpdate()
                                    }

                                    function setOpacity(d) {
                                        var i = d[0].trace.index

                                        if (opacity_before_hover == SHOW_FADED) {
                                            $('#' + form_container + ' input')[i].checked = true
                                            opacity_before_hover = SHOW_CHECK
                                            } else {
                                            $('#' + form_container + ' input')[i].checked = false
                                            opacity_before_hover = SHOW_FADED
                                        }
                                    }

                                    elems.each(function() {
                                        Plotly.d3.select(this).on('click', setOpacity)
                                        Plotly.d3.select(this).on('mouseenter', savePrevious)
                                        Plotly.d3.select(this).on('mouseleave', restorePrevious)
                                    })

                                }
                            })
                        }
                    </script>














                    {# Bower Dependencies #}
                    <script type="text/javascript" src="{% static 'lodash/dist/lodash.min.js' %}"></script>
                    <script type="text/javascript" src="{% static 'angular/angular.min.js' %}"></script>
                </body>
            </html>
